//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Info.plist`.
    static let infoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "Info", withExtension: "plist")`
    static func infoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.infoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `Back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back")
    /// Image `marvel-logo`.
    static let marvelLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "marvel-logo")
    
    /// `UIImage(named: "Back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "marvel-logo", bundle: ..., traitCollection: ...)`
    static func marvelLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.marvelLogo, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `MVComicCollectionViewCell`.
    static let mVComicCollectionViewCell = _R.nib._MVComicCollectionViewCell()
    /// Nib `MVEventCollectionViewCell`.
    static let mVEventCollectionViewCell = _R.nib._MVEventCollectionViewCell()
    /// Nib `MVEventDetailTableViewCell`.
    static let mVEventDetailTableViewCell = _R.nib._MVEventDetailTableViewCell()
    
    /// `UINib(name: "MVComicCollectionViewCell", in: bundle)`
    static func mVComicCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mVComicCollectionViewCell)
    }
    
    /// `UINib(name: "MVEventCollectionViewCell", in: bundle)`
    static func mVEventCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mVEventCollectionViewCell)
    }
    
    /// `UINib(name: "MVEventDetailTableViewCell", in: bundle)`
    static func mVEventDetailTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mVEventDetailTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `MVComicCollectionViewCell`.
    static let mVComicCollectionViewCell: Rswift.ReuseIdentifier<MVComicCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "MVComicCollectionViewCell")
    /// Reuse identifier `MVEventCell`.
    static let mVEventCell: Rswift.ReuseIdentifier<MVEventCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "MVEventCell")
    /// Reuse identifier `MVEventDetailCell`.
    static let mVEventDetailCell: Rswift.ReuseIdentifier<MVEventDetailTableViewCell> = Rswift.ReuseIdentifier(identifier: "MVEventDetailCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 2 view controllers.
  struct segue {
    /// This struct is generated for `MVEventViewController`, and contains static references to 1 segues.
    struct mVEventViewController {
      /// Segue identifier `ShowEventComics`.
      static let showEventComics: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MVEventViewController, MVEventComicsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowEventComics")
      
      /// Optionally returns a typed version of segue `ShowEventComics`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showEventComics(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MVEventViewController, MVEventComicsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mVEventViewController.showEventComics, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MVEventsViewController`, and contains static references to 1 segues.
    struct mVEventsViewController {
      /// Segue identifier `ShowEventDetail`.
      static let showEventDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MVEventsViewController, MVEventViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowEventDetail")
      
      /// Optionally returns a typed version of segue `ShowEventDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showEventDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MVEventsViewController, MVEventViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mVEventsViewController.showEventDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Marvel`.
    static let marvel = _R.storyboard.marvel()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Marvel", bundle: ...)`
    static func marvel(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.marvel)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _MVEventDetailTableViewCell.validate()
    }
    
    struct _MVComicCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MVComicCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MVComicCollectionViewCell"
      let name = "MVComicCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MVComicCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MVComicCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MVEventCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MVEventCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MVEventCell"
      let name = "MVEventCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MVEventCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MVEventCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MVEventDetailTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MVEventDetailTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MVEventDetailCell"
      let name = "MVEventDetailTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MVEventDetailTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MVEventDetailTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "marvel-logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'marvel-logo' is used in nib 'MVEventDetailTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try marvel.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = NavigationViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    struct marvel: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MVEventsViewController
      
      let bundle = R.hostingBundle
      let name = "Marvel"
      
      static func validate() throws {
        if UIKit.UIImage(named: "marvel-logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'marvel-logo' is used in storyboard 'Marvel', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Back") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back' is used in storyboard 'Marvel', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}