//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 13 images.
  struct image {
    /// Image `Back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back")
    /// Image `cross`.
    static let cross = Rswift.ImageResource(bundle: R.hostingBundle, name: "cross")
    /// Image `dishonored`.
    static let dishonored = Rswift.ImageResource(bundle: R.hostingBundle, name: "dishonored")
    /// Image `doom`.
    static let doom = Rswift.ImageResource(bundle: R.hostingBundle, name: "doom")
    /// Image `fifa17`.
    static let fifa17 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fifa17")
    /// Image `gtav`.
    static let gtav = Rswift.ImageResource(bundle: R.hostingBundle, name: "gtav")
    /// Image `marvel-logo`.
    static let marvelLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "marvel-logo")
    /// Image `ps-background`.
    static let psBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "ps-background")
    /// Image `ps-icon`.
    static let psIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ps-icon")
    /// Image `re7`.
    static let re7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "re7")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")
    /// Image `watch_dog`.
    static let watch_dog = Rswift.ImageResource(bundle: R.hostingBundle, name: "watch_dog")
    /// Image `xl-logo`.
    static let xlLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "xl-logo")
    
    /// `UIImage(named: "Back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cross", bundle: ..., traitCollection: ...)`
    static func cross(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cross, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dishonored", bundle: ..., traitCollection: ...)`
    static func dishonored(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dishonored, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "doom", bundle: ..., traitCollection: ...)`
    static func doom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fifa17", bundle: ..., traitCollection: ...)`
    static func fifa17(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fifa17, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gtav", bundle: ..., traitCollection: ...)`
    static func gtav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gtav, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "marvel-logo", bundle: ..., traitCollection: ...)`
    static func marvelLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.marvelLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ps-background", bundle: ..., traitCollection: ...)`
    static func psBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.psBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ps-icon", bundle: ..., traitCollection: ...)`
    static func psIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.psIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "re7", bundle: ..., traitCollection: ...)`
    static func re7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.re7, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "watch_dog", bundle: ..., traitCollection: ...)`
    static func watch_dog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.watch_dog, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "xl-logo", bundle: ..., traitCollection: ...)`
    static func xlLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xlLogo, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 6 nibs.
  struct nib {
    /// Nib `LoadingCellTableViewCell`.
    static let loadingCellTableViewCell = _R.nib._LoadingCellTableViewCell()
    /// Nib `MVComicCollectionViewCell`.
    static let mVComicCollectionViewCell = _R.nib._MVComicCollectionViewCell()
    /// Nib `MVEventCollectionViewCell`.
    static let mVEventCollectionViewCell = _R.nib._MVEventCollectionViewCell()
    /// Nib `MVEventDetailTableViewCell`.
    static let mVEventDetailTableViewCell = _R.nib._MVEventDetailTableViewCell()
    /// Nib `PSFriendCollectionViewCell`.
    static let pSFriendCollectionViewCell = _R.nib._PSFriendCollectionViewCell()
    /// Nib `PSGameCollectionViewCell`.
    static let pSGameCollectionViewCell = _R.nib._PSGameCollectionViewCell()
    
    /// `UINib(name: "LoadingCellTableViewCell", in: bundle)`
    static func loadingCellTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loadingCellTableViewCell)
    }
    
    /// `UINib(name: "MVComicCollectionViewCell", in: bundle)`
    static func mVComicCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mVComicCollectionViewCell)
    }
    
    /// `UINib(name: "MVEventCollectionViewCell", in: bundle)`
    static func mVEventCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mVEventCollectionViewCell)
    }
    
    /// `UINib(name: "MVEventDetailTableViewCell", in: bundle)`
    static func mVEventDetailTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mVEventDetailTableViewCell)
    }
    
    /// `UINib(name: "PSFriendCollectionViewCell", in: bundle)`
    static func pSFriendCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pSFriendCollectionViewCell)
    }
    
    /// `UINib(name: "PSGameCollectionViewCell", in: bundle)`
    static func pSGameCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pSGameCollectionViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 6 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `LoadingCell`.
    static let loadingCell: Rswift.ReuseIdentifier<LoadingCellTableViewCell> = Rswift.ReuseIdentifier(identifier: "LoadingCell")
    /// Reuse identifier `MVComicCollectionViewCell`.
    static let mVComicCollectionViewCell: Rswift.ReuseIdentifier<MVComicCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "MVComicCollectionViewCell")
    /// Reuse identifier `MVEventCell`.
    static let mVEventCell: Rswift.ReuseIdentifier<MVEventCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "MVEventCell")
    /// Reuse identifier `MVEventDetailCell`.
    static let mVEventDetailCell: Rswift.ReuseIdentifier<MVEventDetailTableViewCell> = Rswift.ReuseIdentifier(identifier: "MVEventDetailCell")
    /// Reuse identifier `PSFriendCell`.
    static let pSFriendCell: Rswift.ReuseIdentifier<PSFriendCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PSFriendCell")
    /// Reuse identifier `PSGameCell`.
    static let pSGameCell: Rswift.ReuseIdentifier<PSGameCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PSGameCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 4 view controllers.
  struct segue {
    /// This struct is generated for `MVEventViewController`, and contains static references to 1 segues.
    struct mVEventViewController {
      /// Segue identifier `ShowEventComics`.
      static let showEventComics: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MVEventViewController, MVEventComicsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowEventComics")
      
      /// Optionally returns a typed version of segue `ShowEventComics`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showEventComics(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MVEventViewController, MVEventComicsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mVEventViewController.showEventComics, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MVEventsViewController`, and contains static references to 1 segues.
    struct mVEventsViewController {
      /// Segue identifier `ShowEventDetail`.
      static let showEventDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MVEventsViewController, MVEventViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowEventDetail")
      
      /// Optionally returns a typed version of segue `ShowEventDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showEventDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MVEventsViewController, MVEventViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mVEventsViewController.showEventDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `OnboardingSecondViewController`, and contains static references to 1 segues.
    struct onboardingSecondViewController {
      /// Segue identifier `ShowHomeView`.
      static let showHomeView: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OnboardingSecondViewController, OnboardingHomeViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowHomeView")
      
      /// Optionally returns a typed version of segue `ShowHomeView`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showHomeView(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OnboardingSecondViewController, OnboardingHomeViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.onboardingSecondViewController.showHomeView, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `PSDashboardViewController`, and contains static references to 1 segues.
    struct pSDashboardViewController {
      /// Segue identifier `ShowGameDetail`.
      static let showGameDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PSDashboardViewController, PSGameDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowGameDetail")
      
      /// Optionally returns a typed version of segue `ShowGameDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGameDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PSDashboardViewController, PSGameDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.pSDashboardViewController.showGameDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Marvel`.
    static let marvel = _R.storyboard.marvel()
    /// Storyboard `Onboarding`.
    static let onboarding = _R.storyboard.onboarding()
    /// Storyboard `PlayStation`.
    static let playStation = _R.storyboard.playStation()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Marvel", bundle: ...)`
    static func marvel(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.marvel)
    }
    
    /// `UIStoryboard(name: "Onboarding", bundle: ...)`
    static func onboarding(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.onboarding)
    }
    
    /// `UIStoryboard(name: "PlayStation", bundle: ...)`
    static func playStation(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.playStation)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _MVEventDetailTableViewCell.validate()
      try _PSGameCollectionViewCell.validate()
      try _PSFriendCollectionViewCell.validate()
    }
    
    struct _LoadingCellTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = LoadingCellTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "LoadingCell"
      let name = "LoadingCellTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LoadingCellTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoadingCellTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MVComicCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MVComicCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MVComicCollectionViewCell"
      let name = "MVComicCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MVComicCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MVComicCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MVEventCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MVEventCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MVEventCell"
      let name = "MVEventCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MVEventCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MVEventCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MVEventDetailTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MVEventDetailTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MVEventDetailCell"
      let name = "MVEventDetailTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MVEventDetailTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MVEventDetailTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "marvel-logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'marvel-logo' is used in nib 'MVEventDetailTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PSFriendCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PSFriendCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "PSFriendCell"
      let name = "PSFriendCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PSFriendCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PSFriendCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "user") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in nib 'PSFriendCollectionViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PSGameCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PSGameCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "PSGameCell"
      let name = "PSGameCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PSGameCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PSGameCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "watch_dog") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'watch_dog' is used in nib 'PSGameCollectionViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try marvel.validate()
      try playStation.validate()
      try onboarding.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = NavigationViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    struct marvel: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MVEventsViewController
      
      let bundle = R.hostingBundle
      let name = "Marvel"
      
      static func validate() throws {
        if UIKit.UIImage(named: "marvel-logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'marvel-logo' is used in storyboard 'Marvel', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Back") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back' is used in storyboard 'Marvel', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct onboarding: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = OnboardingStartViewController
      
      let bundle = R.hostingBundle
      let name = "Onboarding"
      let onboardingSecondViewController = StoryboardViewControllerResource<OnboardingSecondViewController>(identifier: "OnboardingSecondViewController")
      
      func onboardingSecondViewController(_: Void = ()) -> OnboardingSecondViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onboardingSecondViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Back") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back' is used in storyboard 'Onboarding', but couldn't be loaded.") }
        if UIKit.UIImage(named: "xl-logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'xl-logo' is used in storyboard 'Onboarding', but couldn't be loaded.") }
        if _R.storyboard.onboarding().onboardingSecondViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onboardingSecondViewController' could not be loaded from storyboard 'Onboarding' as 'OnboardingSecondViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct playStation: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PSDashboardViewController
      
      let bundle = R.hostingBundle
      let name = "PlayStation"
      
      static func validate() throws {
        if UIKit.UIImage(named: "cross") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cross' is used in storyboard 'PlayStation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'PlayStation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ps-icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ps-icon' is used in storyboard 'PlayStation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fifa17") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fifa17' is used in storyboard 'PlayStation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Back") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back' is used in storyboard 'PlayStation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ps-background") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ps-background' is used in storyboard 'PlayStation', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}